package back_tracking_hard;

import java.util.HashSet;
import java.util.Set;

/**
 * June 14, 2019
 * https://leetcode.com/problems/robot-room-cleaner/
 *
 * Solution Steps:
 * 1. We do not have a known 2D matrix to traverse, therefore, we need to keep track of visited spots as string "x-y"
 * 2. Mark all visited spot as if it is a blocker
 * 3. Keep moving forward and until a blocker or visited spot is seen, then turn right and dfs
 *
 * Solution Animation:
 * +------------------------+  +------------------------+  +---+--------------------+
 * |           |------------|  |           |------------|  |   ^       |------------|
 * |           |------------|  |           |------------|  |  1|       |------------|
 * |           |------------|  |           |------------|  |   +       |------------|
 * |           |------------|  |           |------------|  |           |------------|
 * +------------------------+  +---+--------------------+  +---+--------------------+
 * |           |            |  |   ^       |            |  |   ^       |            |
 * |           |            |  |  1|       |            |  |  1|       |            |
 * |           |            |  |   +       |            |  |   +       |            |
 * |           |            |  |           |            |  |           |            |
 * +---+--------------------+  +---+--------------------+  +---+--------------------+
 * |   ^       |------------|  |   ^       |------------|  |   ^       |------------|
 * |  1|       |------------|  |  1|       |------------|  |  1|       |------------|
 * |   +       |------------|  |   +       |------------|  |   +       |------------|
 * |           |------------|  |           |------------|  |           |------------|
 * +------------------------+  +------------------------|  +------------------------|
 *
 * +---+--------------------+  +---+--------------------+  +---+--------------------+
 * |   ^  2    |------------|  |   ^  2    |------------|  |   ^  2    |------------|
 * |  1| +---> |------------|  |  1| +--+> |------------|  |  1| +--+> |------------|
 * |   +       |------------|  |   +    |  |------------|  |4  |    |  |------------|
 * |           |------------|  |        |3 |------------|  <------+ |3 |------------|
 * +---+--------------------+  +---+----v---------------+  +--------v---------------+
 * |   ^       |            |  |   ^       |            |  |   ^       |            |
 * |  1|       |            |  |  1|       |            |  |  1|       |            |
 * |   +       |            |  |   +       |            |  |   +       |            |
 * |           |            |  |           |            |  |           |            |
 * +---+--------------------+  +---+--------------------+  +---+--------------------+
 * |   ^       |------------|  |   ^       |------------|  |   ^       |------------|
 * |  1|       |------------|  |  1|       |------------|  |  1|       |------------|
 * |   +       |------------|  |   +       |------------|  |   +       |------------|
 * |           |------------|  |           |------------|  |           |------------|
 * +------------------------|  +------------------------|  +------------------------|
 *
 * +---+--------------------+  +---+--------------------+  +---+--------------------+
 * |   ^  2    |------------|  |   ^  2    |------------|  |   ^  2    |------------|
 * |  1| +--+> |------------|  |  1| +--+> |------------|  |  1| +--+> |------------|
 * |4  |    |  |------------|  |4  |    |  |------------|  |4  |    |  |------------|
 * <------+ |3 |------------|  <------+ |3 |------------|  <------+ |3 |------------|
 * +--------v---------------+  +--------v---------------+  +--------v---------------+
 * |   ^ |     |            |  |   ^  2    |            |  |   ^  2    |        1   |
 * |  1| | Goback()         |  |  1+-----> |            |  |  1+-----> |    +------>+
 * |   + v     |            |  |   +       |            |  |   +       |            |
 * |           |            |  |           |            |  |           |            |
 * +---+--------------------+  +---+--------------------+  +---+--------------------+
 * |   ^       |------------|  |   ^       |------------|  |   ^       |------------|
 * |  1|       |------------|  |  1|       |------------|  |  1|       |------------|
 * |   +       |------------|  |   +       |------------|  |   +       |------------|
 * |           |------------|  |           |------------|  |           |------------|
 * +------------------------|  +------------------------|  +------------------------|
 *
 * +---+--------------------+  +---+--------------------+  +---+--------------------+
 * |   ^  2    |------------|  |   ^  2    |------------|  |   ^  2    |------------|
 * |  1| +--+> |------------|  |  1| +--+> |------------|  |  1| +--+> |------------|
 * |4  |    |  |------------|  |4  |    |  |------------|  |4  |    |  |------------|
 * <------+ |3 |------------|  <------+ |3 |------------|  <------+ |3 |------------|
 * +--------v---------------+  +--------v---------------+  +--------v---------------+
 * |   ^  2    |        1   |  |   ^  2    |        1   |  |   ^  2    |4^      1   |
 * |  1+-----> |    +----+->+  |  1+-----> |    +------>+  |  1+-----> | |  +------>+
 * |   +       |         |  |  |   +       +<--------+  |  |   +       +<+-------+  |
 * |           |         v2 |  |           |    3    v2 |  |           |    3    v2 |
 * +---+--------------------+  +---+--------------------+  +---+--------------------+
 * |   ^       |------------|  |   ^       |------------|  |   ^       |------------|
 * |  1|       |------------|  |  1|       |------------|  |  1|       |------------|
 * |   +       |------------|  |   +       |------------|  |   +       |------------|
 * |           |------------|  |           |------------|  |           |------------|
 * +------------------------|  +------------------------|  +------------------------|
 *
 *  +------------------------+  +------------------------+  +------------------------+
 *  |   ^  2    |------------|  |   ^  2    |------------|  |   ^  2    |------------|
 *  |  1| +---> |------------|  |  1| +---> |------------|  |  1| +---> |------------|
 *  |4  |    |  |------------|  |4  |    |  |------------|  |4  |    |  |------------|
 *  <------+ |3 |------------|  <------+ |3 |------------|  <------+ |3 |------------|
 *  +--------v---------------+  +--------v---------------+  +--------v---------------+
 *  |   ^  2    |4^      1   |  |   ^  2    |4^      1   |  |   ^  2    |4^      1   |
 *  |  1+-----> | |  +------>+  |  1+-----> | |  +------>+  |  1+-----> | |  +------>+
 *  |   |goBack()<--------+  |  |   +     | +<--------+  |  +<--------+ +<--------+  |
 *  |   <-------+    3    v2 |  |         v3|    3    v2 |  |  4      v3|    3    v2 |
 *  +------------------------+  +------------------------+  +------------------------+
 *  |   ^       |------------|  |   ^       |------------|  |   ^       |------------|
 *  |  1|       |------------|  |  1|       |------------|  |  1|       |------------|
 *  |   +       |------------|  |   +       |------------|  |   +       |------------|
 *  |           |------------|  |           |------------|  |           |------------|
 *  +------------------------|  +------------------------|  +------------------------|
 *
 *  +------------------------+  +------------------------+
 *  |   ^  2    |------------|  |   ^  2    |------------|
 *  |  1| +---> |------------|  |  1| +---> |------------|
 *  |4  |    |  |------------|  |4  |    |  |------------|
 *  <------+ |3 |------------|  <------+ |3 |------------|
 *  +--------v---------------+  +--------v---------------+
 *  |   ^  2    |4^      1   |  |   ^  2    |4^      1   |
 *  |  1+-----> | |  +------>+  |  1+-----> | |  +------>+
 *  +<--------+ +<--------+  |  +<--------+ +<--------+  |
 *  |  4   |  v3|    3    v2 |  |  4      v3|    3    v2 |
 *  +------------------------+  +------------------------+
 *  |   ^  |goBack()|--------|  |   ^ 2     |------------|
 *  |  1|  |    |------------|  |  1+------>-------------|
 *  |   +  v    |------------|  |4  |    |  |------------|
 *  |           |------------|  <--------+ 3|------------|
 *  +------------------------|  +--------v---------------|
 */


public class CleanRoom {

      // This is the robot's control interface.
      // You should not implement it, or speculate about its implementation
      interface Robot {
          // Returns true if the cell in front is open and robot moves into the cell.
          // Returns false if the cell in front is blocked and robot stays in the current cell.
          public boolean move();

          // Robot will stay in the same cell after calling turnLeft/turnRight.
          // Each turn will be 90 degrees.
          public void turnLeft();
          public void turnRight();

          // Clean the current cell.
          public void clean();
      }


    //It is important to keep dx and dy in the right-turning sequence
    int[] dx = {-1, 0, 1, 0};
    int[] dy = {0, 1, 0, -1};

    public void cleanRoom(Robot robot) {
        Set<String> visited = new HashSet();
        dfsHelper(robot, visited, 0, 0, 0);
    }
    //dir 0 = up; dir 1 = right, dir 2 = down, dir 3 = left
    public void dfsHelper(Robot robot, Set<String> visited, int x, int y, int dir) {
        visited.add(x + "-" + y);
        robot.clean();

        for(int i = 0; i < 4; i++) {
            int newDir = (dir + i) % 4;
            int newX = dx[newDir] + x;
            int newY = dy[newDir] + y;
            if(!visited.contains(newX + "-" + newY) && robot.move()) {
                dfsHelper(robot, visited, newX, newY, newDir);
                goBack(robot);
            }

            robot.turnRight();
        }
    }

    //go back one step and remain the same direction
    public void goBack(Robot robot) {
        robot.turnRight();
        robot.turnRight();
        robot.move();
        robot.turnRight();
        robot.turnRight();
    }
}
